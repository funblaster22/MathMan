{"version":3,"mappings":"4CAKA,SAASA,EAAWC,EAAU,GAAI,CAChC,KAAM,CACJ,UAAAC,EAAY,GACZ,cAAAC,EACA,eAAAC,EACA,aAAAC,EACA,eAAAC,EACA,gBAAAC,CACD,EAAGN,EACJ,IAAIO,EACAC,EACAC,EACJ,MAAMC,EAAsB,MAAOC,EAAc,KAAS,CACxD,MAAMH,EAEJ,MAAMC,GAAA,YAAAA,IAEZ,EACE,eAAeG,GAAW,CACxB,GAAI,kBAAmB,UAAW,CAChC,KAAM,CAAE,QAAAC,CAAS,EAAG,MAAKC,EAAA,IAAC,OAAO,uCAAgB,sBACjDP,EAAK,IAAIM,EAAQ,UAAW,CAAE,MAAO,KAAM,KAAM,SAAS,CAAE,EAC5DJ,EAAyB,SAAY,CACnC,MAAMF,GAAA,YAAAA,EAAI,qBAClB,EAYe,CACL,IAAIQ,EAAsB,GAC1B,MAAMC,EAAwB,IAAM,CAClCD,EAAsB,GACtBR,GAAA,MAAAA,EAAI,iBAAiB,cAAgBU,GAAU,CACzCA,EAAM,UACR,OAAO,SAAS,QAChC,GACYf,GAAA,MAAAA,GACZ,EACUK,EAAG,iBAAiB,YAAcU,GAAU,CACtC,OAAOA,EAAM,SAAa,IACxB,OAAOA,EAAM,WAAe,IAC1BA,EAAM,WACRD,IAEA,CAACD,IAAuBZ,GAAA,MAAAA,KAEtBc,EAAM,WACR,OAAO,SAAS,SAEhB,CAACF,IAAuBZ,GAAA,MAAAA,KAElBc,EAAM,UAChBd,GAAA,MAAAA,GAEd,CAAW,EACDI,EAAG,iBAAiB,UAAWS,CAAqB,EACpDT,EAAG,iBAAiB,kBAAmBS,CAAqB,CAC7D,CAEHT,EAAG,SAAS,CAAE,UAAAN,CAAW,GAAE,KAAMiB,GAAM,CACjCb,EACFA,EAAe,UAAWa,CAAC,EAE3Bd,GAAA,MAAAA,EAAec,EACzB,CAAO,EAAE,MAAOC,GAAM,CACdb,GAAA,MAAAA,EAAkBa,EAC1B,CAAO,CACF,CACF,CACD,OAAAX,EAAkBI,EAAQ,EACnBF,CACT","names":["registerSW","options","immediate","onNeedRefresh","onOfflineReady","onRegistered","onRegisteredSW","onRegisterError","wb","registerPromise","sendSkipWaitingMessage","updateServiceWorker","_reloadPage","register","Workbox","__vitePreload","onNeedRefreshCalled","showSkipWaitingPrompt","event","r","e"],"sources":["../../../../../../../../../../../@vite-plugin-pwa/virtual:pwa-register"],"sourcesContent":["// src/client/build/register.ts\nvar autoUpdateMode = \"false\";\nvar selfDestroying = \"false\";\nvar auto = autoUpdateMode === \"true\";\nvar autoDestroy = selfDestroying === \"true\";\nfunction registerSW(options = {}) {\n  const {\n    immediate = false,\n    onNeedRefresh,\n    onOfflineReady,\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  } = options;\n  let wb;\n  let registerPromise;\n  let sendSkipWaitingMessage;\n  const updateServiceWorker = async (_reloadPage = true) => {\n    await registerPromise;\n    if (!auto) {\n      await sendSkipWaitingMessage?.();\n    }\n  };\n  async function register() {\n    if (\"serviceWorker\" in navigator) {\n      const { Workbox } = await import(\"workbox-window\");\n      wb = new Workbox(\"./sw.js\", { scope: \"./\", type: \"classic\" });\n      sendSkipWaitingMessage = async () => {\n        await wb?.messageSkipWaiting();\n      };\n      if (!autoDestroy) {\n        if (auto) {\n          wb.addEventListener(\"activated\", (event) => {\n            if (event.isUpdate || event.isExternal)\n              window.location.reload();\n          });\n          wb.addEventListener(\"installed\", (event) => {\n            if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n        } else {\n          let onNeedRefreshCalled = false;\n          const showSkipWaitingPrompt = () => {\n            onNeedRefreshCalled = true;\n            wb?.addEventListener(\"controlling\", (event) => {\n              if (event.isUpdate)\n                window.location.reload();\n            });\n            onNeedRefresh?.();\n          };\n          wb.addEventListener(\"installed\", (event) => {\n            if (typeof event.isUpdate === \"undefined\") {\n              if (typeof event.isExternal !== \"undefined\") {\n                if (event.isExternal)\n                  showSkipWaitingPrompt();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              } else {\n                if (event.isExternal)\n                  window.location.reload();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              }\n            } else if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n          wb.addEventListener(\"waiting\", showSkipWaitingPrompt);\n          wb.addEventListener(\"externalwaiting\", showSkipWaitingPrompt);\n        }\n      }\n      wb.register({ immediate }).then((r) => {\n        if (onRegisteredSW)\n          onRegisteredSW(\"./sw.js\", r);\n        else\n          onRegistered?.(r);\n      }).catch((e) => {\n        onRegisterError?.(e);\n      });\n    }\n  }\n  registerPromise = register();\n  return updateServiceWorker;\n}\nexport {\n  registerSW\n};\n"],"file":"_app/immutable/chunks/virtual_pwa-register.6ae80bf7.js"}